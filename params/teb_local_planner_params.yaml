TebLocalPlannerROS:
   
  # Trajectory
  
  dt_ref: 0.3                               # Desired temporal resolution of the trajectory (the trajectory is not fixed to dt_ref since the temporal resolution is part of the optimization, but the trajectory will be resized between iterations if dt_ref +-dt_hysteresis is violated.
  dt_hysteresis: 0.1                        # Hysteresis for automatic resizing depending on the current temporal resolution, usually approx. 10% of dt_ref is recommended.
  min_samples: 3                            # Minimum number of samples (should be always greater than 2)
  global_plan_overwrite_orientation: true   # Overwrite orientation of local subgoals provided by the global planner. (since they often provide only a 2D path)
  global_plan_viapoint_sep: -0.1            # If positive, via-points are extrected from the global plan
  max_global_plan_lookahead_dist: 3.0       # Specify the maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization.
  force_reinit_new_goal_dist: 1.0           # Reinitialize the trajectory if a previous goal is updated with a separation of more than the specified value in meters (skip hot-starting)
  feasibility_check_no_poses: 4             # Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval.
  publish_feedback: true                   # Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging).
  shrink_horizon_backup: true               # Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues (e.g. infeasibility). 
  allow_init_with_backwards_motion: true    # If true, underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap.
  exact_arc_length: false                   # If true, the planner uses the exact arc length in velocity, otherwise the Euclidean approximation is used.
  shrink_horizon_min_duration: 10.0         # Specify minimum duration for the reduced horizon in case an infeasible trajectory is detected.

  # Robot

  max_vel_x: 0.8                            # Maximum translational velocity of the robot in meters/sec
  max_vel_x_backwards: 0.8                  # Maximum absolute translational velocity of the robot while driving backwards in meters/sec
  max_vel_y: 0.8                            # Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)
  max_vel_theta: 1.5488                     # Maximum angular velocity of the robot in radians/sec
  #max_vel_theta: 0.968                     # Maximum angular velocity of the robot in radians/sec
  acc_lim_x: 1.0                            # Maximum translational acceleration of the robot in meters/sec^2
  acc_lim_y: 1.0                            # Maximum strafing acceleration of the robot
  acc_lim_theta: 1.936                      # Maximum angular acceleration of the robot in radians/sec^2
  min_turning_radius: 0                     # omni-drive robot (can turn on place!)

  footprint_model:
    type: "point"
    #type: "two_circles"
    #front_offset: 0.1
    #front_radius: 0.43
    #rear_offset: 0.1
    #rear_radius: 0.43

  # GoalTolerance

  xy_goal_tolerance: 0.1                    # Allowed final euclidean distance to the goal position in meters.
  yaw_goal_tolerance: 0.1                   # Allowed final orientation error in radians.
  free_goal_vel: false                      # Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed.

  # Obstacles

  min_obstacle_dist: 0.55                   # This value must also include our robot radius, since footprint_model is set to "point".
  include_costmap_obstacles: true
  include_dynamic_obstacles: true
  costmap_obstacles_behind_robot_dist: 2.0  # Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters).
  obstacle_poses_affected: 30               # Each obstacle position is attached to the closest pose on the trajectory in order to keep a distance. 
  inflation_dist: 0.6                       # Buffer zone around obstacles with non-zero penalty costs
  legacy_obstacle_association: false        # The strategy of connecting trajectory poses with obstacles for optimization has been modified. You can switch to the old/previous strategy by setting this parameter to true. Old strategy: for each obstacle, find the nearest TEB pose; new strategy: for each teb pose, find only "relevant" obstacles.
  obstacle_association_force_inclusion_factor: 1.5  #The non-legacy obstacle association strategy tries to connect only relevant obstacles with the discretized trajectory during optimization. But all obstacles within a specifed distance are forced to be included
  obstacle_association_cutoff_factor: 5
  costmap_converter_plugin: ""
  costmap_converter_spin_thread: true       # If set to true, the costmap converter invokes its callback queue in a different thread.
  costmap_converter_rate: 10                # Rate that defines how often the costmap_converter plugin processes the current costmap (the value should not be much higher than the costmap update rate) [in Hz].

  # Optimization

  no_inner_iterations: 5                    # Number of actual solver iterations called in each outerloop iteration. See param no_outer_iterations.
  no_outer_iterations: 4
  penalty_epsilon: 0.1                      # Add a small safety margin to penalty functions for hard-constraint approximations.
  weight_max_vel_x: 1                       # Optimization weight for satisfying the maximum allowed translational velocity.
  weight_max_vel_y: 1
  weight_max_vel_theta: 1                   # Optimization weight for satisfying the maximum allowed angular velocity.
  weight_acc_lim_x: 0.1                     # Optimization weight for satisfying the maximum allowed translational acceleration.
  weight_acc_lim_y: 0.1
  weight_acc_lim_theta: 0.1                 # Optimization weight for satisfying the maximum allowed angular acceleration.
  weight_kinematics_nh: 0                   # WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY
  weight_kinematics_forward_drive: 0        # Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities).
  weight_kinematics_turning_radius: 0       # Optimization weight for enforcing a minimum turning radius (only for carlike robots).
  weight_optimaltime: 1                     # Optimization weight for contracting the trajectory w.r.t transition/execution time.
  weight_obstacle: 50                       # Optimization weight for keeping a minimum distance from obstacles.
  weight_viapoint: 0                        # Optimization weight for tracking global trajectory
  weight_inflation: 0                       # Optimization weight for the inflation penalty (should be small).
  weight_adapt_factor: 2.0                  # Some special weights (currently weight_obstacle) are repeatedly scaled by this factor in each outer TEB iteration.

  # Homotopy Class Planner

  enable_homotopy_class_planning: false
  enable_multithreading: true
  max_number_classes: 4
  selection_cost_hysteresis: 1.0
  selection_obst_cost_scale: 100.0
  selection_viapoint_cost_scale: 1.0
  selection_alternative_time_cost: false

  roadmap_graph_no_samples: 15
  roadmap_graph_area_width: 6
  h_signature_prescaler: 1.0
  h_signature_threshold: 0.1
  obstacle_keypoint_offset: 0.1
  obstacle_heading_threshold: 1.0
  visualize_hc_graph: false
  viapoints_all_candidates: true
  switching_blocking_period: 0.0

